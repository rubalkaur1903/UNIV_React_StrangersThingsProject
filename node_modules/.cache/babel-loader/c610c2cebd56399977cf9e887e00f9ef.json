{"ast":null,"code":"var _jsxFileName = \"/Users/rubalkaur/MyCourseWork/UNIV_React_StrangersThingsProject/src/Components/Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { callApi } from '../util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Search = ({\n  posts,\n  setPosts\n}) => {\n  _s();\n\n  console.log('postsInSearch', posts);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const postMatches = async () => {\n    try {\n      const searchResp = await callApi({\n        method: 'GET',\n        url: `/posts?title=${searchTerm}`\n      });\n      console.log('searchResp', searchResp);\n\n      if (!searchTerm) {\n        return posts;\n      } else {\n        return posts.find(post => {\n          if (searchTerm === post.title.toLowerCase()) {\n            return post;\n          } // const searchResults = post.title.toLowerCase() === searchTerm;\n          // console.log('searchResults', searchResults)\n\n        });\n      } // await setPosts(searchResults);\n\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  postMatches(); // const postMatches = (post) => {\n  //     console.log('post', post)\n  //     const includedPosts = posts.include(searchTerm, post);\n  // }\n  // const filteredPosts = posts.filter(post => postMatches(post, searchTerm));\n  // const postsToDisplay = searchTerm.length ? filteredPosts : posts;\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"search-form\",\n      onSubmit: async ev => {\n        ev.preventDefault();\n        console.log('searchTerm', searchTerm); // const mappingPosts = postsToDisplay.map(postToDisplay)\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"search\",\n        className: \"search-input\",\n        value: searchTerm,\n        onChange: event => setSearchTerm(event.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"search-btn\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Search, \"a1cMJ8t0eYFnsCEdGcHtaGJdbCM=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/rubalkaur/MyCourseWork/UNIV_React_StrangersThingsProject/src/Components/Search.js"],"names":["React","useState","callApi","Search","posts","setPosts","console","log","searchTerm","setSearchTerm","postMatches","searchResp","method","url","find","post","title","toLowerCase","error","ev","preventDefault","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,SAAxB;;;;AAEA,MAAMC,MAAM,GAAI,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAD,KAAuB;AAAA;;AACnCC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BH,KAA7B;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMS,WAAW,GAAG,YAAY;AAC5B,QAAI;AACA,YAAMC,UAAU,GAAG,MAAMT,OAAO,CAAC;AAC7BU,QAAAA,MAAM,EAAE,KADqB;AAE7BC,QAAAA,GAAG,EAAG,gBAAeL,UAAW;AAFH,OAAD,CAAhC;AAIAF,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BI,UAA1B;;AAEA,UAAG,CAACH,UAAJ,EAAgB;AACZ,eAAOJ,KAAP;AACH,OAFD,MAEM;AACF,eAAOA,KAAK,CAACU,IAAN,CAAWC,IAAI,IAAI;AACtB,cAAIP,UAAU,KAAKO,IAAI,CAACC,KAAL,CAAWC,WAAX,EAAnB,EAA6C;AACzC,mBAAOF,IAAP;AACH,WAHqB,CAItB;AACA;;AACH,SANM,CAAP;AAOH,OAjBD,CAkBA;;AACH,KAnBD,CAmBE,OAAOG,KAAP,EAAc;AACZZ,MAAAA,OAAO,CAACY,KAAR,CAAcA,KAAd;AACH;AACJ,GAvBD;;AAwBJR,EAAAA,WAAW,GA5B4B,CA6BnC;AACA;AACA;AACA;AACA;AACA;;AAGA,sBAAO;AAAA,2BACH;AAAM,MAAA,SAAS,EAAC,aAAhB;AAA8B,MAAA,QAAQ,EAAG,MAAOS,EAAP,IAAc;AACnDA,QAAAA,EAAE,CAACC,cAAH;AACAd,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BC,UAA1B,EAFmD,CAGnD;AACH,OAJD;AAAA,8BAMI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,QAA/B;AAAwC,QAAA,SAAS,EAAC,cAAlD;AAAiE,QAAA,KAAK,EAAEA,UAAxE;AAAoF,QAAA,QAAQ,EAAGa,KAAD,IAAWZ,aAAa,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd;AAAtH;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADG,mBAAP;AAWH,CAhDD;;GAAMpB,M;;KAAAA,M;AAkDN,eAAeA,MAAf","sourcesContent":["import React, { useState } from 'react';\nimport { callApi } from '../util';\n\nconst Search =  ({posts, setPosts}) => {\n    console.log('postsInSearch', posts)\n    const [searchTerm, setSearchTerm] = useState('');\n\n    const postMatches = async () => {\n        try {\n            const searchResp = await callApi({\n                method: 'GET',\n                url: `/posts?title=${searchTerm}`,\n            });\n            console.log('searchResp', searchResp);\n        \n            if(!searchTerm) {\n                return posts;\n            } else{\n                return posts.find(post => {\n                    if (searchTerm === post.title.toLowerCase()) {\n                        return post;\n                    }\n                    // const searchResults = post.title.toLowerCase() === searchTerm;\n                    // console.log('searchResults', searchResults)\n                })\n            }\n            // await setPosts(searchResults);\n        } catch (error) {\n            console.error(error)\n        }\n    }\npostMatches();\n    // const postMatches = (post) => {\n    //     console.log('post', post)\n    //     const includedPosts = posts.include(searchTerm, post);\n    // }\n    // const filteredPosts = posts.filter(post => postMatches(post, searchTerm));\n    // const postsToDisplay = searchTerm.length ? filteredPosts : posts;\n\n\n    return <>\n        <form className=\"search-form\" onSubmit={ async (ev) => {\n            ev.preventDefault();\n            console.log('searchTerm', searchTerm)\n            // const mappingPosts = postsToDisplay.map(postToDisplay)\n        }\n    }>\n            <input type=\"text\" placeholder=\"search\" className=\"search-input\" value={searchTerm} onChange={(event) => setSearchTerm(event.target.value)}></input>\n            <button type=\"submit\" className=\"search-btn\">Search</button>\n        </form>\n    </>\n}\n\nexport default Search;"]},"metadata":{},"sourceType":"module"}